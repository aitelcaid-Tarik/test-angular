{"ast":null,"code":"import _classCallCheck from \"/Users/admin/Desktop/primeng-tablecolresize-demo-axsbn1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Desktop/primeng-tablecolresize-demo-axsbn1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nvar _c0 = function _c0(a0, a1, a2) {\n  return {\n    \"p-checkbox-label-active\": a0,\n    \"p-disabled\": a1,\n    \"p-checkbox-label-focus\": a2\n  };\n};\n\nfunction TriStateCheckbox_label_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function TriStateCheckbox_label_6_Template_label_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n\n      var _r0 = ɵngcc0.ɵɵreference(3);\n\n      return ctx_r2.onClick($event, _r0);\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(3, _c0, ctx_r1.value != null, ctx_r1.disabled, ctx_r1.focused));\n    ɵngcc0.ɵɵattribute(\"for\", ctx_r1.inputId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.label);\n  }\n}\n\nvar _c1 = function _c1(a1, a2) {\n  return {\n    \"p-checkbox p-component\": true,\n    \"p-checkbox-disabled\": a1,\n    \"p-checkbox-focused\": a2\n  };\n};\n\nvar _c2 = function _c2(a0, a1, a2) {\n  return {\n    \"p-highlight\": a0,\n    \"p-disabled\": a1,\n    \"p-focus\": a2\n  };\n};\n\nvar _c3 = function _c3(a0, a1) {\n  return {\n    \"pi-check\": a0,\n    \"pi-times\": a1\n  };\n};\n\nvar TRISTATECHECKBOX_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return TriStateCheckbox;\n  }),\n  multi: true\n};\n\nvar TriStateCheckbox = /*#__PURE__*/function () {\n  function TriStateCheckbox(cd) {\n    _classCallCheck(this, TriStateCheckbox);\n\n    this.cd = cd;\n    this.onChange = new EventEmitter();\n\n    this.onModelChange = function () {};\n\n    this.onModelTouched = function () {};\n  }\n\n  _createClass(TriStateCheckbox, [{\n    key: \"onClick\",\n    value: function onClick(event, input) {\n      if (!this.disabled && !this.readonly) {\n        this.toggle(event);\n        this.focused = true;\n        input.focus();\n      }\n    }\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event) {\n      if (event.keyCode == 32) {\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"onKeyup\",\n    value: function onKeyup(event) {\n      if (event.keyCode == 32 && !this.readonly) {\n        this.toggle(event);\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(event) {\n      if (this.value == null || this.value == undefined) this.value = true;else if (this.value == true) this.value = false;else if (this.value == false) this.value = null;\n      this.onModelChange(this.value);\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value\n      });\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.focused = true;\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.focused = false;\n      this.onModelTouched();\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n      this.cd.markForCheck();\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(disabled) {\n      this.disabled = disabled;\n      this.cd.markForCheck();\n    }\n  }]);\n\n  return TriStateCheckbox;\n}();\n\nTriStateCheckbox.ɵfac = function TriStateCheckbox_Factory(t) {\n  return new (t || TriStateCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nTriStateCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TriStateCheckbox,\n  selectors: [[\"p-triStateCheckbox\"]],\n  inputs: {\n    disabled: \"disabled\",\n    name: \"name\",\n    ariaLabelledBy: \"ariaLabelledBy\",\n    tabindex: \"tabindex\",\n    inputId: \"inputId\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    label: \"label\",\n    readonly: \"readonly\"\n  },\n  outputs: {\n    onChange: \"onChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([TRISTATECHECKBOX_VALUE_ACCESSOR])],\n  decls: 7,\n  vars: 24,\n  consts: [[3, \"ngStyle\", \"ngClass\"], [1, \"p-hidden-accessible\"], [\"type\", \"text\", \"inputmode\", \"none\", 3, \"name\", \"readonly\", \"disabled\", \"keyup\", \"keydown\", \"focus\", \"blur\"], [\"input\", \"\"], [\"role\", \"checkbox\", 1, \"p-checkbox-box\", 3, \"ngClass\", \"click\"], [1, \"p-checkbox-icon\", \"pi\", 3, \"ngClass\"], [\"class\", \"p-checkbox-label\", 3, \"ngClass\", \"click\", 4, \"ngIf\"], [1, \"p-checkbox-label\", 3, \"ngClass\", \"click\"]],\n  template: function TriStateCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      var _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"input\", 2, 3);\n      ɵngcc0.ɵɵlistener(\"keyup\", function TriStateCheckbox_Template_input_keyup_2_listener($event) {\n        return ctx.onKeyup($event);\n      })(\"keydown\", function TriStateCheckbox_Template_input_keydown_2_listener($event) {\n        return ctx.onKeydown($event);\n      })(\"focus\", function TriStateCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TriStateCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n      ɵngcc0.ɵɵlistener(\"click\", function TriStateCheckbox_Template_div_click_4_listener($event) {\n        ɵngcc0.ɵɵrestoreView(_r4);\n\n        var _r0 = ɵngcc0.ɵɵreference(3);\n\n        return ctx.onClick($event, _r0);\n      });\n      ɵngcc0.ɵɵelement(5, \"span\", 5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, TriStateCheckbox_label_6_Template, 2, 7, \"label\", 6);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.styleClass);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", ɵngcc0.ɵɵpureFunction2(14, _c1, ctx.disabled, ctx.focused));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"name\", ctx.name)(\"readonly\", ctx.readonly)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.inputId)(\"tabindex\", ctx.tabindex)(\"aria-labelledby\", ctx.ariaLabelledBy);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(17, _c2, ctx.value != null, ctx.disabled, ctx.focused));\n      ɵngcc0.ɵɵattribute(\"aria-checked\", ctx.value === true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(21, _c3, ctx.value == true, ctx.value == false));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.label);\n    }\n  },\n  directives: [ɵngcc1.NgStyle, ɵngcc1.NgClass, ɵngcc1.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nTriStateCheckbox.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nTriStateCheckbox.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  ariaLabelledBy: [{\n    type: Input\n  }],\n  tabindex: [{\n    type: Input\n  }],\n  inputId: [{\n    type: Input\n  }],\n  style: [{\n    type: Input\n  }],\n  styleClass: [{\n    type: Input\n  }],\n  label: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  onChange: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TriStateCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-triStateCheckbox',\n      template: \"\\n        <div [ngStyle]=\\\"style\\\" [ngClass]=\\\"{'p-checkbox p-component': true,'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\\\" [class]=\\\"styleClass\\\">\\n            <div class=\\\"p-hidden-accessible\\\">\\n                <input #input type=\\\"text\\\" [attr.id]=\\\"inputId\\\" [name]=\\\"name\\\" [attr.tabindex]=\\\"tabindex\\\" [readonly]=\\\"readonly\\\" [disabled]=\\\"disabled\\\" (keyup)=\\\"onKeyup($event)\\\" (keydown)=\\\"onKeydown($event)\\\" (focus)=\\\"onFocus()\\\" (blur)=\\\"onBlur()\\\" [attr.aria-labelledby]=\\\"ariaLabelledBy\\\" inputmode=\\\"none\\\">\\n            </div>\\n            <div class=\\\"p-checkbox-box\\\" (click)=\\\"onClick($event,input)\\\"  role=\\\"checkbox\\\" [attr.aria-checked]=\\\"value === true\\\"\\n                [ngClass]=\\\"{'p-highlight':value!=null,'p-disabled':disabled,'p-focus':focused}\\\">\\n                <span class=\\\"p-checkbox-icon pi\\\" [ngClass]=\\\"{'pi-check':value==true,'pi-times':value==false}\\\"></span>\\n            </div>\\n        </div>\\n        <label class=\\\"p-checkbox-label\\\" (click)=\\\"onClick($event,input)\\\"\\n               [ngClass]=\\\"{'p-checkbox-label-active':value!=null, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\\\"\\n               *ngIf=\\\"label\\\" [attr.for]=\\\"inputId\\\">{{label}}</label>\\n    \",\n      providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    onChange: [{\n      type: Output\n    }],\n    disabled: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    inputId: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }]\n  });\n})();\n\nvar TriStateCheckboxModule = function TriStateCheckboxModule() {\n  _classCallCheck(this, TriStateCheckboxModule);\n};\n\nTriStateCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: TriStateCheckboxModule\n});\nTriStateCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function TriStateCheckboxModule_Factory(t) {\n    return new (t || TriStateCheckboxModule)();\n  },\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TriStateCheckboxModule, {\n    declarations: function declarations() {\n      return [TriStateCheckbox];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [TriStateCheckbox];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TriStateCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [TriStateCheckbox],\n      declarations: [TriStateCheckbox]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TRISTATECHECKBOX_VALUE_ACCESSOR, TriStateCheckbox, TriStateCheckboxModule };","map":{"version":3,"sources":["../../src/app/components/tristatecheckbox/tristatecheckbox.ts","../../src/app/components/tristatecheckbox/primeng-tristatecheckbox.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TRISTATECHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TriStateCheckbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-triStateCheckbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-checkbox p-component': true,'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\" inputmode=\"none\">\n            </div>\n            <div class=\"p-checkbox-box\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'p-highlight':value!=null,'p-disabled':disabled,'p-focus':focused}\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':value==true,'pi-times':value==false}\"></span>\n            </div>\n        </div>\n        <label class=\"p-checkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'p-checkbox-label-active':value!=null, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TriStateCheckbox implements ControlValueAccessor  {\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    @Input() disabled: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() label: string;\n\n    @Input() readonly: boolean;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    focused: boolean;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    onClick(event: Event, input: HTMLInputElement) {\n        if (!this.disabled && !this.readonly) {\n            this.toggle(event);\n            this.focused = true;\n            input.focus();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        if (event.keyCode == 32) {\n            event.preventDefault();\n        }\n    }\n\n    onKeyup(event: KeyboardEvent) {\n        if (event.keyCode == 32 && !this.readonly) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n\n    toggle(event: Event) {\n        if (this.value == null || this.value == undefined)\n            this.value = true;\n        else if (this.value == true)\n            this.value = false;\n        else if (this.value == false)\n            this.value = null;\n\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        })\n    }\n\n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n        this.onModelTouched();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n\n    setDisabledState(disabled: boolean): void {\n        this.disabled = disabled;\n        this.cd.markForCheck();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [TriStateCheckbox],\n    declarations: [TriStateCheckbox]\n})\nexport class TriStateCheckboxModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}